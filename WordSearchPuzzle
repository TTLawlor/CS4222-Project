

import java.util.*;
public class WordSearchPuzzle {
    
    private char[][] puzzle;
    private List<String> puzzleWords; 
    List<String> wordDirection = new ArrayList<String>();
    List<String> position = new ArrayList<String>();
    int dimensions;
    int length = 0;
    double sum;
    char randomDirection;
    //List<String> userSpecifiedWords =  Arrays.asList("green", "blue", "red", "orange", "yellow", "purple");
    //"green", "blue", "red", "orange"
    public WordSearchPuzzle(List<String> userSpecifiedWords) {
         // puzzle generation using user specified words
         // The user passes in a list of words to be used
         // for generating the word search grid.
         //Scanner input = new Scanner(System.in);
         //puzzleWords.add(input.next());
         //userSpecifiedWords =  Arrays.asList();
         //WordSearchPuzzle instance = new WordSearchPuzzle(userSpecifiedWords);
         
         puzzleWords = new ArrayList<>();
         for(int i = 0; i < userSpecifiedWords.size(); i++)  {
             puzzleWords.add(userSpecifiedWords.get(i));
         }
            
            
         for(String str : puzzleWords) {
             length = length + str.length();
         }
            sum = length*1.75;
            dimensions = (int)Math.ceil(Math.sqrt(sum));
            System.out.println("Dimensions = " + dimensions);
            
    }
    
    
    public WordSearchPuzzle(String wordFile, int wordCount,
                              int shortest, int longest)      {
        // puzzle generation using words from a file
        // The user supplies the filename. In the file 
        // the words should appear one per line.
        // The wordCount specifies the number of words
        // to (randomly) select from the file for use in
        // the puzzle.
        // shortest and longest specify the shortest
        // word length to be used and longest specifies
        // the longest word length to be used.
        // SO, using the words in the file randomly select
        // wordCount words with lengths between shortest
        // and longest.
        String words = " ";
        for(int i = 0; i < wordCount; i++)  {
           // words = M
        }
    }

     
    public List<String> getWordSearchList(){
          System.out.println(puzzleWords);
          return puzzleWords;
    }
      
    
    public char[][] getPuzzleAsGrid(){
          String alphabet = "abcdefghijklmnopqrstuvwxyz";
          puzzle = new char[dimensions][dimensions];
          
          for(int r = 0; r < dimensions; r++){
             for(int c = 0; c < dimensions; c++){
                 int random = (int)(Math.random()* alphabet.length());
                 puzzle[r][c] = alphabet.toUpperCase().charAt(random);
                 System.out.print(puzzle[r][c] + " ");   
             }
             System.out.println();   
          }
            
          return puzzle;
    }
    
    
    public String getPuzzleAsString(){
         String puzzleAsString = "";
         for(int r = 0; r < dimensions; r++){
             puzzleAsString = puzzleAsString + Arrays.toString(puzzle[r]) + "\n";
             
         }
         System.out.print(puzzleAsString);
         return puzzleAsString;
    }
        
    
       
    public void generateWordSearchPuzzle(){
        Collections.sort(puzzleWords);
        String direction = "UDLR";
        int i, j, r, c, random, randomRow, randomCol;
        char[][] wordPuzzle = new char[dimensions][dimensions];
        char randomDirection;
        
        for(r = 0; r < dimensions; r++){
           for(c = 0; c < dimensions; c++){
              wordPuzzle[r][c] = ' ';
           }
        }
          
            
        for(j = 0; j < puzzleWords.size(); j++){ 
           String word = puzzleWords.get(j).toUpperCase();
           random = (int)(Math.random()*direction.length());
           randomDirection = direction.charAt(random);
           
           if(randomDirection == 'U'){
               int maxBoundaries = dimensions - word.length();
               randomCol = (int)(Math.random()*dimensions);
               randomRow = (int)(Math.random()*maxBoundaries + word.length()-1);
               wordDirection.add("Up");
               
               // for (r = randomRow; r < word.length()-1; r--){
                   // if (wordPuzzle[r][randomCol] != ' '){
                       // randomCol = (int)(Math.random()*dimensions);
                       // randomRow = (int)(Math.random()*maxBoundaries + word.length()-1);
                       // randomDirection = direction.charAt(random);
                    // }
               // }
               
               position.add(String.valueOf(randomRow) + "," + String.valueOf(randomCol)); 
               
               for(i = 0; i < word.length(); i++){
                   wordPuzzle[randomRow][randomCol] = word.charAt(i);
                   randomRow--;
                }
                
           } else if(randomDirection == 'D'){
               wordDirection.add("Down");
               
               int maxBoundaries = dimensions - word.length();
               randomCol = (int)(Math.random()*dimensions);
               randomRow = (int)(Math.random()*maxBoundaries);
               // for (r = randomRow; r < word.length()-1; r++){
                   // if (wordPuzzle[r][randomCol] != ' '){
                       
                       // randomCol = (int)(Math.random()*dimensions);
                       // randomRow = (int)(Math.random()*maxBoundaries);
                       // randomDirection = direction.charAt(random);
                       
                    // }
                // }
                
               position.add(String.valueOf(randomRow) + "," + String.valueOf(randomCol));
               
               for(i = 0; i < word.length(); i++){
                   wordPuzzle[randomRow][randomCol] = word.charAt(i);
                   randomRow++;
               } 
                    
                    
           } else if(randomDirection == 'R'){
               wordDirection.add("Left to Right");
               
               int maxBoundaries = dimensions - word.length();
               randomCol = (int)(Math.random()*maxBoundaries);
               randomRow = (int)(Math.random()*dimensions);
               // for (c = randomCol; c < word.length()-1; c++){
                   // if (wordPuzzle[randomRow][c] != ' '){
                       // randomCol = (int)(Math.random()*maxBoundaries);
                       // randomRow = (int)(Math.random()*dimensions);
                       // randomDirection = direction.charAt(random);
                    // }
                // }
                
               position.add(String.valueOf(randomRow) + "," + String.valueOf(randomCol));
               
               for(i = 0; i < word.length(); i++){
                   wordPuzzle[randomRow][randomCol] = word.charAt(i);
                   randomCol++;
               } 
               
            } else if(randomDirection == 'L'){
                wordDirection.add("Right to Left");
                
                int maxBoundaries = dimensions - word.length();
                randomCol = (int)(Math.random()*maxBoundaries + word.length()-1);
                randomRow = (int)(Math.random()*dimensions);
                // for (c = randomCol; c < word.length()-1; c--){
                   // if (wordPuzzle[randomRow][c] != ' '){
                       // randomCol = (int)(Math.random()*maxBoundaries + word.length()-1);
                       // randomRow = (int)(Math.random()*dimensions);
                       // randomDirection = direction.charAt(random);
                    // }
                // }
                
                position.add(String.valueOf(randomRow) + "," + String.valueOf(randomCol));
                
                for(i = 0; i < word.length(); i++){
                    wordPuzzle[randomRow][randomCol] = word.charAt(i);
                    randomCol--;
                }
                
            }
        }
        
        for(r = 0; r < dimensions; r++){
             for(c = 0; c < dimensions; c++){
                if(wordPuzzle[r][c] == ' '){
                 wordPuzzle[r][c] = puzzle[r][c];
                }
                System.out.print(wordPuzzle[r][c] + " ");
             }
             System.out.println();            
          
        }
    }
    
    public void showWordSearchPuzzle(boolean hide){
        Collections.sort(puzzleWords);
        System.out.println("PUZZLE - random characters");
        System.out.println("------");
        if(hide == false){
             
             for(int r = 0; r < dimensions; r++){
                for(int c = 0; c < dimensions; c++){
                    System.out.print(puzzle[r][c] + " ");
                }
                 System.out.println();            
             }
             System.out.println();
             
             for(int i = 0; (i < puzzleWords.size()) && (i < wordDirection.size()); i++){ 
                 System.out.print(puzzleWords.get(i).toUpperCase() + " ");
                 System.out.println(position.get(i));
                 System.out.println("Direction: " + wordDirection.get(i) + "\n");
             }
        }else{
             for(int r = 0; r < dimensions; r++){
                for(int c = 0; c < dimensions; c++){
                     System.out.print(puzzle[r][c] + " ");
                }
                 System.out.println();            
             }
             System.out.println();
             for(int i = 0; i < puzzleWords.size(); i++){ 
                 System.out.println(puzzleWords.get(i).toUpperCase() + randomDirection);
             }
        }
    }
}
