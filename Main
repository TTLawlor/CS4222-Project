

import java.util.*;
public class WordSearchPuzzle {
    private char[][] puzzle ;
    private List<String> puzzleWords ;
    double dimensions;
    
    public WordSearchPuzzle(List<String> userSpecifiedWords) {
         // puzzle generation using user specified words
         // The user passes in a list of words to be used
         // for generating the word search grid.
            for(int i = 0; i < userSpecifiedWords.size(); i++)  {
                puzzleWords.add(userSpecifiedWords.get(i));
            }
            
            
            int length = 0;
            double sum;
            for(String str : userSpecifiedWords) {
                length = length + str.length();
            }
            sum = length*1.5;
            dimensions = Math.sqrt(sum);
    }

    public WordSearchPuzzle(String wordFile, int wordCount,
                              int shortest, int longest)      {
        // puzzle generation using words from a file
        // The user supplies the filename. In the file 
        // the words should appear one per line.
        // The wordCount specifies the number of words
        // to (randomly) select from the file for use in
        // the puzzle.
        // shortest and longest specify the shortest
        // word length to be used and longest specifies
        // the longest word length to be used.
        // SO, using the words in the file randomly select
        // wordCount words with lengths between shortest
        // and longest.

    }

      // The dimensions of the puzzle grid should be set
      // by summing the lengths of the words being used in the
      // puzzle and multiplying the sum by 1.5 or 1.75
      // or some other (appropriate) scaling factor to
      // ensure that the grid will have enough additional
      // characters to obscure the puzzle words. Once
      // you have calculated how many characters you are
      // going to have in the grid you can calculate the
      // grid dimensions by getting the square root (rounded up)
      // of the character total.
    //
      // You will also need to add the methods specified below
      
      public List<String> getWordSearchList(){
          return puzzleWords;
      }
       
      public char[][] getPuzzleAsGrid(){
          return puzzle;
        }
        
      public String getPuzzleAsString(){
         String puzzleAsString = " ";
         for(int r = 0; r < puzzle.length; r++){
             for(int c = 0; c < puzzle[0].length; c++){
                 puzzleAsString = puzzleAsString + puzzle[r][c];
                }
             puzzleAsString = puzzleAsString + "\n";
            }
         return puzzleAsString;
        }
        
      public void showWordSearchPuzzle(boolean hide){
          
        }
}
